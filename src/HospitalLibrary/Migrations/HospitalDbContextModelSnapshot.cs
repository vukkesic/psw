// <auto-generated />
using System;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CancelationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CancelationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Canceled = false,
                            DoctorId = 2,
                            EndTime = new DateTime(2023, 5, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            StartTime = new DateTime(2023, 5, 20, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Used = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "If you are worried about whether your child needs to gain weight, it’s very important to check with your doctor before getting to work on fattening them up. It’s entirely possible that your child’s weight is absolutely fine. Given that one in five children in the US is obese and another one in six is overweight, it’s easy to see how a parent might think their child is too thin in comparison. One way to find out if your child’s weight is healthy is to check their body mass index, a calculation using height and weight that is used for children ages 2 and up.",
                            Title = "Does your child need to gain weight?"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagnosisCode")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("HealthDataId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Prescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HealthDataId");

                    b.ToTable("examinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 1, 24, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DiagnosisCode = "1AFA",
                            DiagnosisDescription = "Dijabetes tipa 2",
                            DoctorId = 2,
                            HealthDataId = 1,
                            PatientId = 1,
                            Prescription = "Ishrana za dijabeticare."
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MenstrualData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ApproxOvulationDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("NextPeriod")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("menstrualdata");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproxOvulationDay = new DateTime(2023, 4, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastPeriod = new DateTime(2023, 3, 20, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            NextPeriod = new DateTime(2023, 4, 23, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientHealthData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BloodPresure")
                        .HasColumnType("text");

                    b.Property<string>("BloodSugar")
                        .HasColumnType("text");

                    b.Property<string>("BodyFatPercentage")
                        .HasColumnType("text");

                    b.Property<DateTime>("MeasurementTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Weight")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("healthdata");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodPresure = "120/80",
                            BloodSugar = "12",
                            BodyFatPercentage = "17",
                            MeasurementTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            Weight = "102"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ReferralLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("referralletters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            PatientId = 1,
                            SpecializationId = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Floor = 1,
                            Number = "101A"
                        },
                        new
                        {
                            Id = 2,
                            Floor = 2,
                            Number = "204"
                        },
                        new
                        {
                            Id = 3,
                            Floor = 3,
                            Number = "305B"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SpecName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SpecName = "Allergy and immunology"
                        },
                        new
                        {
                            Id = 2,
                            SpecName = "Anesthesiology"
                        },
                        new
                        {
                            Id = 3,
                            SpecName = "Dermatology"
                        },
                        new
                        {
                            Id = 4,
                            SpecName = "Diagnostic radiology"
                        },
                        new
                        {
                            Id = 5,
                            SpecName = "Emergency medicine"
                        },
                        new
                        {
                            Id = 6,
                            SpecName = "Family medicine"
                        },
                        new
                        {
                            Id = 7,
                            SpecName = "Internal medicine"
                        },
                        new
                        {
                            Id = 8,
                            SpecName = "Medical genetics"
                        },
                        new
                        {
                            Id = 9,
                            SpecName = "Neurology"
                        },
                        new
                        {
                            Id = 10,
                            SpecName = "Nuclear medicine"
                        },
                        new
                        {
                            Id = 11,
                            SpecName = "Obstetrics and gynecology"
                        },
                        new
                        {
                            Id = 12,
                            SpecName = "Ophthalmology"
                        },
                        new
                        {
                            Id = 13,
                            SpecName = "Pathology"
                        },
                        new
                        {
                            Id = 14,
                            SpecName = "Pediatrics"
                        },
                        new
                        {
                            Id = 15,
                            SpecName = "Physical medicine and rehabilitation"
                        },
                        new
                        {
                            Id = 16,
                            SpecName = "Preventive medicine"
                        },
                        new
                        {
                            Id = 17,
                            SpecName = "Psychiatry"
                        },
                        new
                        {
                            Id = 18,
                            SpecName = "Radiation oncology"
                        },
                        new
                        {
                            Id = 19,
                            SpecName = "Surgery"
                        },
                        new
                        {
                            Id = 20,
                            SpecName = "Urology"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.User");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1967, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "miki@gmail.com",
                            Gender = 0,
                            Name = "Miki",
                            Password = "123",
                            Phone = "0691202148",
                            ProfileImage = "",
                            Role = 1,
                            Surname = "Mikic",
                            Username = "miki@gmail.com",
                            LicenseNumber = "123dr2009",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1991, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "roki@gmail.com",
                            Gender = 0,
                            Name = "Roki",
                            Password = "123",
                            Phone = "06312909304",
                            ProfileImage = "",
                            Role = 1,
                            Surname = "Rokic",
                            Username = "roki@gmail.com",
                            LicenseNumber = "198r2009",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1995, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dunja@gmail.com",
                            Gender = 1,
                            Name = "Dunja",
                            Password = "123",
                            Phone = "0656757304",
                            ProfileImage = "",
                            Role = 1,
                            Surname = "Jovanovic",
                            Username = "dunja@gmail.com",
                            LicenseNumber = "138r2014",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1990, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anja@gmail.com",
                            Gender = 1,
                            Name = "Anja",
                            Password = "123",
                            Phone = "0604489354",
                            ProfileImage = "",
                            Role = 1,
                            Surname = "Ilic",
                            Username = "anja@gmail.com",
                            LicenseNumber = "14567sd8",
                            SpecializationId = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.HasBaseType("HospitalLibrary.Core.Model.User");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2018, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vuk@mail.com",
                            Gender = 0,
                            Name = "Vuk",
                            Password = "123",
                            Phone = "06312212",
                            ProfileImage = "",
                            Role = 0,
                            Surname = "Kesic",
                            Username = "vuk@mail.com",
                            Blocked = false
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1988, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria@mail.com",
                            Gender = 1,
                            Name = "Maria",
                            Password = "123",
                            Phone = "06893232",
                            ProfileImage = "",
                            Role = 0,
                            Surname = "Rossi",
                            Username = "maria@mail.com",
                            Blocked = false
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationReport", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.PatientHealthData", "HealthData")
                        .WithMany()
                        .HasForeignKey("HealthDataId");

                    b.Navigation("HealthData");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MenstrualData", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PatientHealthData", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ReferralLetter", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });
#pragma warning restore 612, 618
        }
    }
}
